version: '3'
services:

  init:
    build:
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP}'
        XDEBUG: '${XDEBUG}'
    container_name: solawi_php_init
    command: 'bash ./installPhp.sh'
    environment:
      REFRESH: '${REFRESH}'
      WWWUSER: '${WWWUSER}'
      LARAVEL_SAIL: 1
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    volumes:
      - '.:/var/www/html'
    networks:
      - backend-network
    depends_on:
      - mysql
      - redis

  app:
    build:
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP}'
        XDEBUG: '${XDEBUG}'
    container_name: solawi_php_app
    ports:
      - '${APP_PORT:-80}:80'
    environment:
      WWWUSER: '${WWWUSER}'
      LARAVEL_SAIL: 1
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    volumes:
      - '.:/var/www/html'
    networks:
      - backend-network
    depends_on:
      init:
        condition: service_completed_successfully

  queue-worker:
    build:
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP}'
        XDEBUG: '${XDEBUG}'
    container_name: solawi_php_queue_worker
    entrypoint: [ "php", "artisan", "queue:work" ]
    environment:
      WWWUSER: '${WWWUSER}'
      LARAVEL_SAIL: 1
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    volumes:
      - '.:/var/www/html'
    networks:
      - backend-network
    depends_on:
      init:
        condition: service_completed_successfully

  schedule-worker:
    build:
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP}'
        XDEBUG: '${XDEBUG}'
    container_name: solawi_php_schedule_worker
    entrypoint: [ "php", "artisan", "schedule:work" ]
    environment:
      WWWUSER: '${WWWUSER}'
      LARAVEL_SAIL: 1
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    volumes:
      - '.:/var/www/html'
    networks:
      - backend-network
    depends_on:
      init:
        condition: service_completed_successfully

# Two databases get created while init. Once (solawi) for local development and another one (solawi_ut) for unit tests
# see mysql/init/ for further information
  mysql:
    image: 'mysql:8.0'
    container_name: '${DB_HOST}'
    ports:
      - '3307:3306'
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      retries: 3
      timeout: 5s

  redis:
    image: redis:alpine
    container_name: '${REDIS_HOST}'
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - ./data/redis:/data
    networks:
      - backend-network
    ports:
      - "8002:6379"

networks:
  backend-network:
    driver: bridge
volumes:
  dbdata:
    driver: local
  dbdata-ut:
    driver: local
