name: "CI"

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    container:
      image: kirschbaumdevelopment/laravel-test-runner:7.4

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_PASSWORD: secret
          MYSQL_USER: solawi_ut
          MYSQL_DATABASE: solawi_ut
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install composer dependencies
        run: |
          composer install --no-scripts
      - name: Prepare Laravel Application
        run: |
          php -r "file_exists('.env') || copy('.env.testing.example', '.env');"
          php artisan key:generate
      - name: Run Testsuite
        run: vendor/bin/phpunit tests/

  phpcs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer, cs2pr

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use the hash of composer.json as the key for your cache if you do not commit composer.lock.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-suggest --no-progress

      - name: Detect coding standard violations
        run: vendor/bin/phpcs --standard=ruleset.xml app/ -q --report=checkstyle | cs2pr --graceful-warnings

#  deploy:
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/develop'
#    needs: unit-tests
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Deployment
#        uses: appleboy/ssh-action@master
#        env:
#          REPOSRC: ${{ github.server_url }}/${{ github.repository }}.git
#          LOCALREPO: ${{ secrets.LOCALREPO }}
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          username: ${{ secrets.SSH_USERNAME }}
#          envs: REPOSRC,LOCALREPO
#          script: |
#            if [ ! -d $LOCALREPO ]
#            then
#                git clone $REPOSRC $LOCALREPO
#            else
#                cd $LOCALREPO
#                git checkout -f
#                git pull
#            fi
